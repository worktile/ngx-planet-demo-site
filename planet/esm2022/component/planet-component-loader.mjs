import { Injectable, ApplicationRef, NgModuleRef, NgZone, Inject, Injector, createComponent, reflectComponentType } from '@angular/core';
import { PlanetComponentRef } from './planet-component-ref';
import { coerceArray } from '../helpers';
import { map, shareReplay, delayWhen } from 'rxjs/operators';
import { of, timer } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import { getApplicationLoader, getApplicationService, getPlanetApplicationRef, getBootstrappedPlanetApplicationRef } from '../global-planet';
import * as i0 from "@angular/core";
const componentWrapperClass = 'planet-component-wrapper';
function isComponentType(component) {
    return typeof component === 'function' && component.constructor === Function;
}
export class PlanetComponentLoader {
    get applicationLoader() {
        return getApplicationLoader();
    }
    get applicationService() {
        return getApplicationService();
    }
    constructor(applicationRef, ngModuleRef, ngZone, document) {
        this.applicationRef = applicationRef;
        this.ngModuleRef = ngModuleRef;
        this.ngZone = ngZone;
        this.document = document;
    }
    getPlantAppRef(name) {
        const plantAppRef = getBootstrappedPlanetApplicationRef(name);
        if (plantAppRef) {
            return of(plantAppRef);
        }
        else {
            const app = this.applicationService.getAppByName(name);
            return this.applicationLoader.preload(app, true).pipe(map(() => {
                return getPlanetApplicationRef(name);
            }));
        }
    }
    createInjector(parentInjector, componentRef) {
        return Injector.create({
            providers: [
                {
                    provide: PlanetComponentRef,
                    useValue: componentRef
                }
            ],
            parent: parentInjector
        });
    }
    getContainerElement(config) {
        if (!config.container) {
            throw new Error(`config 'container' cannot be null`);
        }
        else {
            if (config.container.nativeElement) {
                return config.container.nativeElement;
            }
            else {
                return config.container;
            }
        }
    }
    insertComponentRootNodeToContainer(container, componentRootNode, hostClass) {
        const subApp = this.applicationService.getAppByName(this.ngModuleRef.instance.appName);
        componentRootNode.classList.add(componentWrapperClass);
        componentRootNode.setAttribute('planet-inline', '');
        if (hostClass) {
            componentRootNode.classList.add(hostClass);
        }
        if (subApp && subApp.stylePrefix) {
            componentRootNode.classList.add(subApp.stylePrefix);
        }
        // container 是注释则在前方插入，否则在元素内部插入
        if (container.nodeType === 8) {
            container.parentElement.insertBefore(componentRootNode, container);
        }
        else {
            container.appendChild(componentRootNode);
        }
    }
    attachComponent(component, environmentInjector, config) {
        const plantComponentRef = new PlanetComponentRef();
        const appRef = this.applicationRef;
        const injector = this.createInjector(environmentInjector, plantComponentRef);
        const container = this.getContainerElement(config);
        const componentRef = createComponent(component, {
            environmentInjector: environmentInjector,
            elementInjector: injector
        });
        appRef.attachView(componentRef.hostView);
        const componentRootNode = this.getComponentRootNode(componentRef);
        this.insertComponentRootNodeToContainer(container, componentRootNode, config.hostClass || config.wrapperClass);
        if (config.initialState) {
            Object.assign(componentRef.instance, config.initialState);
        }
        plantComponentRef.componentInstance = componentRef.instance;
        plantComponentRef.componentRef = componentRef;
        plantComponentRef.hostElement = componentRootNode;
        plantComponentRef.dispose = () => {
            if (appRef.viewCount > 0) {
                appRef.detachView(componentRef.hostView);
            }
            componentRef?.destroy();
            componentRootNode.remove();
        };
        return plantComponentRef;
    }
    /** Gets the root HTMLElement for an instantiated component. */
    getComponentRootNode(componentRef) {
        return componentRef.hostView.rootNodes[0];
    }
    registerComponentFactory(componentOrComponents) {
        const app = this.ngModuleRef.instance.appName;
        this.getPlantAppRef(app).subscribe((appRef) => {
            appRef.registerComponentFactory((componentName, config) => {
                const components = coerceArray(componentOrComponents);
                const planetComponent = components.find(item => {
                    return isComponentType(item)
                        ? reflectComponentType(item).selector.includes(componentName)
                        : item.name === componentName;
                });
                if (planetComponent) {
                    return this.ngZone.run(() => {
                        const componentRef = this.attachComponent(isComponentType(planetComponent) ? planetComponent : planetComponent.component, appRef.appModuleRef.injector, config);
                        return componentRef;
                    });
                }
                else {
                    throw Error(`unregistered component ${componentName} in app ${app}`);
                }
            });
        });
    }
    register(components) {
        setTimeout(() => {
            this.registerComponentFactory(components);
        });
    }
    load(app, componentName, config) {
        const result = this.getPlantAppRef(app).pipe(delayWhen((appRef) => {
            if (appRef.getComponentFactory()) {
                return of('');
            }
            else {
                // Because register use 'setTimeout',so timer 20
                return timer(20);
            }
        }), map(appRef => {
            const componentFactory = appRef.getComponentFactory();
            if (componentFactory) {
                return componentFactory(componentName, config);
            }
            else {
                throw new Error(`${app}'s component(${componentName}) is not registered`);
            }
        }), shareReplay());
        result.subscribe();
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: PlanetComponentLoader, deps: [{ token: i0.ApplicationRef }, { token: i0.NgModuleRef }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: PlanetComponentLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: PlanetComponentLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i0.ApplicationRef }, { type: i0.NgModuleRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { hashCode, isEmpty, getScriptsAndStylesFullPaths } from './helpers';
import { of, Observable, forkJoin, concat } from 'rxjs';
import { map, switchMap, concatAll } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { createSandbox } from './sandbox';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class AssetsLoader {
    constructor(http) {
        this.http = http;
        this.loadedSources = [];
    }
    loadScript(src) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.async = true;
            if (script['readyState']) {
                // IE
                script['onreadystatechange'] = () => {
                    if (script['readyState'] === 'loaded' || script['readyState'] === 'complete') {
                        script['onreadystatechange'] = null;
                        observer.next({
                            src: src,
                            hashCode: id,
                            loaded: true,
                            status: 'Loaded'
                        });
                        observer.complete();
                        this.loadedSources.push(id);
                    }
                };
            }
            else {
                // Others
                script.onload = () => {
                    observer.next({
                        src: src,
                        hashCode: id,
                        loaded: true,
                        status: 'Loaded'
                    });
                    observer.complete();
                    this.loadedSources.push(id);
                };
            }
            script.onerror = error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: false,
                    status: 'Error',
                    error: error
                });
                observer.complete();
            };
            document.body.appendChild(script);
        });
    }
    loadScriptWithSandbox(app, src) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            this.http.get(src, { responseType: 'text' }).subscribe((code) => {
                this.loadedSources.push(id);
                const sandbox = createSandbox(app);
                sandbox.execScript(code, src);
                observer.next({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded'
                });
                observer.complete();
            }, error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: false,
                    status: 'Error',
                    error: error
                });
                observer.complete();
            });
        });
    }
    loadStyle(src) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            const head = document.getElementsByTagName('head')[0];
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = src;
            link.media = 'all';
            link.onload = () => {
                observer.next({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded'
                });
                observer.complete();
                this.loadedSources.push(id);
            };
            link.onerror = error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded',
                    error: error
                });
                observer.complete();
            };
            head.appendChild(link);
        });
    }
    loadScripts(sources, options = {
        serial: false,
        sandbox: false
    }) {
        if (isEmpty(sources)) {
            return of(null);
        }
        const observables = sources.map(src => {
            // TODO: 暂时只支持Proxy沙箱
            if (options.sandbox && window.Proxy) {
                return this.loadScriptWithSandbox(options.app, src);
            }
            else {
                return this.loadScript(src);
            }
        });
        if (options.serial) {
            const a = concat(...observables).pipe(map(item => {
                return of([item]);
            }), concatAll());
            return a;
        }
        else {
            return forkJoin(observables).pipe();
        }
    }
    loadStyles(sources) {
        if (isEmpty(sources)) {
            return of(null);
        }
        return forkJoin(sources.map(src => {
            return this.loadStyle(src);
        }));
    }
    loadScriptsAndStyles(scripts = [], styles = [], options) {
        return forkJoin([this.loadScripts(scripts, options), this.loadStyles(styles)]);
    }
    loadAppAssets(app) {
        if (app.manifest) {
            return this.loadManifest(`${app.manifest}?t=${new Date().getTime()}`).pipe(switchMap(manifestResult => {
                const { scripts, styles } = getScriptsAndStylesFullPaths(app, manifestResult);
                return this.loadScriptsAndStyles(scripts, styles, {
                    app: app.name,
                    sandbox: app.sandbox,
                    serial: app.loadSerial
                });
            }));
        }
        else {
            const { scripts, styles } = getScriptsAndStylesFullPaths(app);
            return this.loadScriptsAndStyles(scripts, styles, {
                app: app.name,
                sandbox: app.sandbox,
                serial: app.loadSerial
            });
        }
    }
    loadManifest(url) {
        return this.http.get(url).pipe(map((response) => {
            return response;
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
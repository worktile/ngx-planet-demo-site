import { Injectable } from '@angular/core';
import { hashCode, isEmpty, getResourceFileName, getExtName, isObject, getAssetsBasePath, getScriptsAndStylesAssets } from './helpers';
import { of, Observable, forkJoin, concat } from 'rxjs';
import { map, switchMap, concatAll } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { createSandbox } from './sandbox';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
const STYLE_LINK_OR_SCRIPT_REG = /<[script|link].*?>/gi;
const LINK_OR_SRC_REG = /(src|href)=["'](.*?[\.js|\.css])["']/i;
const TAG_ATTRS_REG = /(type|defer|async)((=["'].*?["'])|\s|\>)/gi;
export class AssetsLoader {
    constructor(http) {
        this.http = http;
        this.loadedSources = [];
    }
    loadScript(src, tagAttributes) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            const script = document.createElement('script');
            script.type = tagAttributes?.type || 'text/javascript';
            script.src = src;
            if (!tagAttributes?.defer || tagAttributes?.defer !== 'false') {
                script.defer = true;
            }
            if (!tagAttributes?.async && tagAttributes?.async === 'false') {
                script.async = true;
            }
            if (script['readyState']) {
                // IE
                script['onreadystatechange'] = () => {
                    if (script['readyState'] === 'loaded' || script['readyState'] === 'complete') {
                        script['onreadystatechange'] = null;
                        observer.next({
                            src: src,
                            hashCode: id,
                            loaded: true,
                            status: 'Loaded'
                        });
                        observer.complete();
                        this.loadedSources.push(id);
                    }
                };
            }
            else {
                // Others
                script.onload = () => {
                    observer.next({
                        src: src,
                        hashCode: id,
                        loaded: true,
                        status: 'Loaded'
                    });
                    observer.complete();
                    this.loadedSources.push(id);
                };
            }
            script.onerror = error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: false,
                    status: 'Error',
                    error: error
                });
                observer.complete();
            };
            document.body.appendChild(script);
        });
    }
    loadScriptWithSandbox(app, src) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            this.http.get(src, { responseType: 'text' }).subscribe((code) => {
                this.loadedSources.push(id);
                const sandbox = createSandbox(app);
                sandbox.execScript(code, src);
                observer.next({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded'
                });
                observer.complete();
            }, error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: false,
                    status: 'Error',
                    error: error
                });
                observer.complete();
            });
        });
    }
    loadStyle(src) {
        const id = hashCode(src);
        if (this.loadedSources.includes(id)) {
            return of({
                src: src,
                hashCode: id,
                loaded: true,
                status: 'Loaded'
            });
        }
        return new Observable((observer) => {
            const head = document.getElementsByTagName('head')[0];
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = src;
            link.media = 'all';
            link.onload = () => {
                observer.next({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded'
                });
                observer.complete();
                this.loadedSources.push(id);
            };
            link.onerror = error => {
                observer.error({
                    src: src,
                    hashCode: id,
                    loaded: true,
                    status: 'Loaded',
                    error: error
                });
                observer.complete();
            };
            head.appendChild(link);
        });
    }
    loadScripts(sources, options = {
        serial: false,
        sandbox: false
    }) {
        if (isEmpty(sources)) {
            return of(null);
        }
        const observables = sources.map(source => {
            // TODO: 暂时只支持Proxy沙箱
            if (options.sandbox && window.Proxy) {
                return this.loadScriptWithSandbox(options.app, source.src);
            }
            else {
                return this.loadScript(source.src, source.attributes);
            }
        });
        if (options.serial) {
            const a = concat(...observables).pipe(map(item => {
                return of([item]);
            }), concatAll());
            return a;
        }
        else {
            return forkJoin(observables).pipe();
        }
    }
    loadStyles(sources) {
        if (isEmpty(sources)) {
            return of(null);
        }
        return forkJoin(sources.map(source => {
            return this.loadStyle(source.src);
        }));
    }
    loadScriptsAndStyles(scripts = [], styles = [], options) {
        return forkJoin([this.loadScripts(scripts, options), this.loadStyles(styles)]);
    }
    /**
     * <script type="module" src="http://127.0.0.1:3001/main.js" async defer></script>
     * => [`type="module"`, "async ", "defer>"] as attributeStrMatchArr
     * => { type: "module", async: "async", defer: "defer" } as attributes
     */
    parseTagAttributes(tag) {
        const attributeStrMatchArr = tag.match(TAG_ATTRS_REG);
        if (attributeStrMatchArr) {
            const attributes = {};
            attributeStrMatchArr.forEach(item => {
                const equalSignIndex = item.indexOf('=');
                if (equalSignIndex > 0) {
                    // 'type="module"' => { type: "module" }
                    const key = item.slice(0, equalSignIndex);
                    attributes[key] = item.slice(equalSignIndex + 2, item.length - 1);
                }
                else {
                    // 'async ' => 'async'
                    // 'defer>' => 'defer'
                    const key = item.slice(0, item.length - 1);
                    attributes[key] = key;
                }
            });
            return attributes;
        }
        return undefined;
    }
    parseManifestFromHTML(html) {
        const result = {};
        const matchResult = html.match(STYLE_LINK_OR_SCRIPT_REG);
        matchResult.forEach(item => {
            const linkOrSrcResult = item.match(LINK_OR_SRC_REG);
            if (linkOrSrcResult && linkOrSrcResult[2]) {
                const src = linkOrSrcResult[2];
                const hashName = getResourceFileName(src);
                let barSplitIndex = hashName.indexOf('-');
                let dotSplitIndex = hashName.indexOf('.');
                const splitIndex = barSplitIndex > -1 ? barSplitIndex : dotSplitIndex;
                if (splitIndex > -1) {
                    const name = hashName.slice(0, splitIndex);
                    const ext = getExtName(hashName);
                    const assetsTag = {
                        src: src
                    };
                    result[ext ? `${name}.${ext}` : name] = assetsTag;
                    const attributes = this.parseTagAttributes(item);
                    if (attributes) {
                        assetsTag.attributes = attributes;
                    }
                    // const typeTagResult = item.match(TAG_TYPE_REG);
                    // if (typeTagResult && typeTagResult[1]) {
                    //     assetsTag.attributes = {
                    //         type: typeTagResult[1]
                    //     };
                    // }
                }
            }
        });
        return result;
    }
    loadAppAssets(app) {
        const basePath = getAssetsBasePath(app);
        const manifest = app.entry ? (isObject(app.entry) ? app.entry.manifest : app.entry) : app.manifest;
        if (manifest) {
            const manifestExt = getExtName(manifest);
            const isHtml = manifestExt === 'html';
            const responseType = isHtml ? 'text' : 'json';
            return this.loadManifest(`${manifest}?t=${new Date().getTime()}`, responseType).pipe(switchMap(manifestResult => {
                const { scripts, styles } = getScriptsAndStylesAssets(app, basePath, manifestResult);
                return this.loadScriptsAndStyles(scripts, styles, {
                    app: app.name,
                    sandbox: app.sandbox,
                    serial: app.loadSerial
                });
            }));
        }
        else {
            const { scripts, styles } = getScriptsAndStylesAssets(app, basePath);
            return this.loadScriptsAndStyles(scripts, styles, {
                app: app.name,
                sandbox: app.sandbox,
                serial: app.loadSerial
            });
        }
    }
    loadManifest(url, responseType = 'json') {
        return this.http
            .get(url, {
            responseType: responseType
        })
            .pipe(map((response) => {
            if (responseType === 'text') {
                return this.parseManifestFromHTML(response);
            }
            else {
                const result = {};
                Object.keys(response).forEach(key => {
                    result[key] = {
                        src: response[key]
                    };
                });
                return result;
            }
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: AssetsLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
import { NgModuleRef, NgZone } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { take } from 'rxjs/operators';
import { from } from 'rxjs';
import { getTagNameByTemplate } from '../helpers';
import { getSandboxInstance } from '../sandbox/';
export class NgPlanetApplicationRef {
    get selector() {
        return this.innerSelector;
    }
    get ngZone() {
        return (this.injector || this.appModuleRef?.injector)?.get(NgZone);
    }
    get sandbox() {
        return getSandboxInstance();
    }
    get bootstrapped() {
        return !!(this.appModuleRef || this.appRef);
    }
    constructor(name, options) {
        this.name = name;
        if (options) {
            this.template = options.template;
            this.innerSelector = this.template ? getTagNameByTemplate(this.template) : '';
            this.appModuleBootstrap = options.bootstrap;
        }
        // This is a hack, since NgZone doesn't allow you to configure the property that identifies your zone.
        // See https://github.com/PlaceMe-SAS/single-spa-angular-cli/issues/33,
        // NgZone.isInAngularZone = () => {
        //     // @ts-ignore
        //     return window.Zone.current._properties[`ngx-planet-${name}`] === true;
        // };
    }
    // 子应用路由变化后同步修改 portal 的 Route
    syncPortalRouteWhenNavigationEnd() {
        const router = (this.injector || this.appModuleRef?.injector)?.get(Router);
        if (router) {
            router.events.subscribe(event => {
                if (event instanceof NavigationEnd) {
                    this.ngZone?.onStable
                        .asObservable()
                        .pipe(take(1))
                        .subscribe(() => {
                        this.portalApp.router.navigateByUrl(event.url);
                    });
                }
            });
        }
    }
    bootstrap(app) {
        if (!this.appModuleBootstrap) {
            throw new Error(`app(${this.name}) is not defined`);
        }
        this.portalApp = app;
        return from(this.appModuleBootstrap(app).then(appModuleRef => {
            if (appModuleRef['instance']) {
                this.appModuleRef = appModuleRef;
                this.appModuleRef.instance.appName = this.name;
                this.injector = this.appModuleRef.injector;
            }
            else {
                this.appRef = appModuleRef;
                this.injector = this.appRef.injector;
                const moduleRef = this.appRef.injector.get(NgModuleRef);
                moduleRef.instance = { appName: this.name };
            }
            this.syncPortalRouteWhenNavigationEnd();
            return this;
        }));
    }
    getRouter() {
        return (this.injector || this.appModuleRef?.injector)?.get(Router);
    }
    getCurrentRouterStateUrl() {
        return this.getRouter()?.routerState.snapshot.url;
    }
    navigateByUrl(url) {
        const router = this.getRouter();
        this.ngZone?.run(() => {
            router?.navigateByUrl(url);
        });
    }
    getComponentFactory() {
        return this.componentFactory;
    }
    registerComponentFactory(componentFactory) {
        this.componentFactory = componentFactory;
    }
    destroy() {
        if (this.appModuleRef || this.appRef) {
            const router = (this.injector || this.appModuleRef?.injector)?.get(Router);
            if (router) {
                router.dispose();
            }
            if (this.sandbox) {
                this.sandbox.destroy();
            }
            this.appModuleRef?.destroy();
            this.appModuleRef = undefined;
            this.appRef?.destroy();
            this.appRef = undefined;
            this.injector = undefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,